plugins {
    id 'java'
    id 'org.springframework.boot' version '3.0.6'
    id 'io.spring.dependency-management' version '1.1.2'
    id 'org.liquibase.gradle' version '2.2.0'
    id 'application'
//    id 'checkstyle'
    id 'jacoco'
//    id("io.freefair.lombok") version "8.2.2"

}

group = 'hexlet.code'
version = '1.0-SNAPSHOT'

java {
    sourceCompatibility = '20'
}

application {
    mainClass.set("hexlet.code.AppApplication")
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-jpa")
    implementation("org.springframework.boot:spring-boot-starter-validation")
    implementation("org.springframework.boot:spring-boot-devtools")
    implementation("org.springframework.boot:spring-boot-configuration-processor")

    implementation('com.querydsl:querydsl-jpa:5.0.0:jakarta')
    implementation("org.hibernate.validator:hibernate-validator:8.0.1.Final")
    implementation("org.liquibase:liquibase-core")
    implementation ("org.postgresql:postgresql:42.6.0")

    implementation("net.datafaker:datafaker:2.0.1")
    implementation("org.instancio:instancio-junit:3.3.0")

    annotationProcessor(
            'org.projectlombok:lombok',
            'com.querydsl:querydsl-apt:5.0.0:jakarta',
            'jakarta.persistence:jakarta.persistence-api:3.1.0'
    )

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'org.postgresql:postgresql:42.6.0'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
//    testImplementation 'org.springframework.boot:spring-boot-starter-security'
//    testImplementation 'org.springframework.security:spring-security-test'
    testImplementation(platform("org.junit:junit-bom:5.10.0"))
    testImplementation("org.junit.jupiter:junit-jupiter:5.10.0")
    implementation 'net.datafaker:datafaker:2.0.2'
    testImplementation("net.javacrumbs.json-unit:json-unit-assertj:3.2.2")

    liquibaseRuntime(
            sourceSets.main.output,
            'org.liquibase:liquibase-core',
            'info.picocli:picocli:4.7.1',
            'org.liquibase.ext:liquibase-hibernate6:4.21.1',
            'org.springframework.boot:spring-boot-starter-data-jpa',
            'com.h2database:h2',
    )

}


diffChangelog {
    dependsOn compileJava
}

// Настраиваем Liquibase
liquibase {
    activities {
        main {
            // Указываем путь, по которому будет сгенерирован файл миграции
            changelogFile 'src/main/resources/db/changelog/db.changelog-master.yaml'
            // Указывем источник, с которым будут сравниваться изменения
            // Это база данных, изначально она пустая
            url 'jdbc:h2:./devtmdb'
            username 'sa'
            password 'sa'
            // Сравниваем с моделями, задавая пакет
            referenceUrl 'hibernate:spring:hexlet.code.model.' +
                    // Указываем диалект
                    '?dialect=org.hibernate.dialect.H2Dialect' +
                    // Указываем правила именования таблиц и столбцов,
                    // чтобы они соответствовали правилам Spring
                    '&hibernate.physical_naming_strategy=org.hibernate.boot.model.naming.CamelCaseToUnderscoresNamingStrategy'
        }
    }
}


test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = true
    }
    dependsOn test
}